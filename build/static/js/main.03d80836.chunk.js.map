{"version":3,"sources":["components/Button.jsx","components/Input.jsx","components/ClearBtn.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Button","props","className","val","children","isNaN","onClick","add","Input","input","ClearBtn","handleClear","App","state","addToInput","setState","handleEqual","math","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4PAkBeA,G,MAbA,SAACC,GACd,OACE,yBACEC,UAAS,0BANKC,EAODF,EAAMG,SANfC,MAAMF,IAAgB,MAARA,GAAuB,MAARA,EAMK,WAAP,OAE/BG,QAAS,kBAAML,EAAMM,IAAIN,EAAMG,YAE9BH,EAAMG,UAXM,IAACD,ICILK,EAJD,SAACP,GACb,OAAO,yBAAKC,UAAU,SAASD,EAAMQ,QCOxBC,EARE,SAACT,GAChB,OACE,yBAAKC,UAAU,WAAWI,QAASL,EAAMU,aACtCV,EAAMG,WC0FEQ,E,4MAtFbC,MAAQ,CAAEJ,MAAO,I,EAEjBK,WAAa,SAACX,IACA,MAARA,GAAuB,MAARA,GAAuB,MAARA,GAAuB,MAARA,GACtB,KAArB,EAAKU,MAAMJ,QAIjB,EAAKM,SAAS,CAAEN,MAAO,EAAKI,MAAMJ,MAAQN,K,EAG5Ca,YAAc,WACa,KAArB,EAAKH,MAAMJ,OAAqC,MAArB,EAAKI,MAAMJ,OAG1C,EAAKM,SAAS,CAAEN,MAAOQ,IAAc,EAAKJ,MAAMJ,U,uDAwBxC,IAAD,OACP,OACE,yBAAKP,UAAU,OACb,yBAAKA,UAAU,gBACb,yBAAKA,UAAU,OACb,kBAAC,EAAD,CAAOA,UAAU,QAAQO,MAAOS,KAAKL,MAAMJ,SAG7C,yBAAKP,UAAU,OACb,kBAAC,EAAD,CAAQK,IAAKW,KAAKJ,YAAlB,KACA,kBAAC,EAAD,CAAQP,IAAKW,KAAKJ,YAAlB,KACA,kBAAC,EAAD,CAAQP,IAAKW,KAAKJ,YAAlB,KACA,kBAAC,EAAD,CAAQP,IAAKW,KAAKJ,YAAlB,MAEF,yBAAKZ,UAAU,OACb,kBAAC,EAAD,CAAQK,IAAKW,KAAKJ,YAAlB,KACA,kBAAC,EAAD,CAAQP,IAAKW,KAAKJ,YAAlB,KACA,kBAAC,EAAD,CAAQP,IAAKW,KAAKJ,YAAlB,KACA,kBAAC,EAAD,CAAQP,IAAKW,KAAKJ,YAAlB,MAEF,yBAAKZ,UAAU,OACb,kBAAC,EAAD,CAAQK,IAAKW,KAAKJ,YAAlB,KACA,kBAAC,EAAD,CAAQP,IAAKW,KAAKJ,YAAlB,KACA,kBAAC,EAAD,CAAQP,IAAKW,KAAKJ,YAAlB,KACA,kBAAC,EAAD,CAAQP,IAAKW,KAAKJ,YAAlB,MAEF,yBAAKZ,UAAU,OACb,kBAAC,EAAD,CAAQK,IAAKW,KAAKJ,YAAlB,KACA,kBAAC,EAAD,CAAQP,IAAKW,KAAKJ,YAAlB,KACA,kBAAC,EAAD,CAAQP,IAAKW,KAAKF,aAAlB,KACA,kBAAC,EAAD,CAAQT,IAAKW,KAAKJ,YAAlB,MAEF,yBAAKZ,UAAU,OACb,kBAAC,EAAD,CACES,YAAa,WACX,EAAKI,SAAS,CAAEN,MAAO,OAF3B,gB,GAzEMU,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.03d80836.chunk.js","sourcesContent":["import React from \"react\";\n\nconst isOperator = (val) => {\n  return !isNaN(val) || val === \".\" || val === \"=\";\n};\nconst Button = (props) => {\n  return (\n    <div\n      className={`button-wrapper ${\n        isOperator(props.children) ? null : \"operator\"\n      }`}\n      onClick={() => props.add(props.children)}\n    >\n      {props.children}\n    </div>\n  );\n};\n\nexport default Button;\n","import React from \"react\";\n\nconst Input = (props) => {\n  return <div className=\"input\">{props.input}</div>;\n};\n\nexport default Input;\n","import React from \"react\";\n\nconst ClearBtn = (props) => {\n  return (\n    <div className=\"clearBtn\" onClick={props.handleClear}>\n      {props.children}\n    </div>\n  );\n};\n\nexport default ClearBtn;\n","import React, { Component } from \"react\";\nimport * as math from \"mathjs\";\nimport \"./App.css\";\nimport Button from \"./components/Button\";\nimport Input from \"./components/Input\";\nimport ClearBtn from \"./components/ClearBtn\";\nimport SpecialBtn from \"./components/SpecialBtn\";\n\nclass App extends Component {\n  state = { input: \"\" };\n\n  addToInput = (val) => {\n    if (val === \"/\" || val === \"*\" || val === \"+\" || val === \"-\") {\n      if (this.state.input === \"\") {\n        return;\n      }\n    }\n    this.setState({ input: this.state.input + val });\n  };\n\n  handleEqual = () => {\n    if (this.state.input === \"\" || this.state.input === \".\") {\n      return;\n    }\n    this.setState({ input: math.evaluate(this.state.input) });\n  };\n\n  // flipSign = () => {\n  //   if (\n  //     this.state.input === \"\" ||\n  //     this.state.input === \".\" ||\n  //     this.state.input === \"0\"\n  //   ) {\n  //     return;\n  //   }\n  //   this.setState({ input: parseInt(this.state.input) * -1 });\n  // };\n\n  // findPercent = () => {\n  //   if (\n  //     this.state.input === \"\" ||\n  //     this.state.input === \".\" ||\n  //     this.state.input === \"0\"\n  //   ) {\n  //     return;\n  //   }\n  //   this.setState({ input: parseInt(this.state.input) / 100 });\n  // };\n  render() {\n    return (\n      <div className=\"app\">\n        <div className=\"calc-wrapper\">\n          <div className=\"row\">\n            <Input className=\"input\" input={this.state.input} />\n          </div>\n\n          <div className=\"row\">\n            <Button add={this.addToInput}>7</Button>\n            <Button add={this.addToInput}>8</Button>\n            <Button add={this.addToInput}>9</Button>\n            <Button add={this.addToInput}>/</Button>\n          </div>\n          <div className=\"row\">\n            <Button add={this.addToInput}>4</Button>\n            <Button add={this.addToInput}>5</Button>\n            <Button add={this.addToInput}>6</Button>\n            <Button add={this.addToInput}>*</Button>\n          </div>\n          <div className=\"row\">\n            <Button add={this.addToInput}>1</Button>\n            <Button add={this.addToInput}>2</Button>\n            <Button add={this.addToInput}>3</Button>\n            <Button add={this.addToInput}>+</Button>\n          </div>\n          <div className=\"row\">\n            <Button add={this.addToInput}>.</Button>\n            <Button add={this.addToInput}>0</Button>\n            <Button add={this.handleEqual}>=</Button>\n            <Button add={this.addToInput}>-</Button>\n          </div>\n          <div className=\"row\">\n            <ClearBtn\n              handleClear={() => {\n                this.setState({ input: \"\" });\n              }}\n            >\n              Clear\n            </ClearBtn>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport App from \"./App.jsx\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}